{"version":3,"file":"CMap.min.js","sources":["../src/event/index.js","../src/init.js","../src/animate/swing.js","../src/animate/index.js","../src/canvas.js","../src/compute/getMapBlockInfo.js","../src/style.js","../src/compute/methods.js","../src/compute/index.js","../src/draw.js","../src/history.js","../src/index.js"],"sourcesContent":["export function mouseEvt () {\n    let historyIndex = -1\n    let currentMap = null\n    let _blocks = null\n    let _opt = this.options\n    let _callback = _opt.callback\n    let { selectedMode: _selectedMode, \n        style: _BStyle} = _opt.map.blocks\n    let mouseMove = {\n        hold: false,\n        x: 0,\n        y: 0,\n        status: false // 记录是否有移动\n    }\n\n    /**\n     * 判断是否在区块中\n     * @param {number} x x轴移动    \n     * @param {number} y y轴移动\n     * @callback 回调函数\n     */\n    let checkInMap = (x, y, callback) => {\n        if (!currentMap) return {index: -1}\n        \n        const pixel = this.hitCtx.getImageData(x, y, 1, 1).data\n        const color = `rgb(${pixel[0]},${pixel[1]},${pixel[2]})`\n        const shape = currentMap.colorsHash[color] || {index: -1}\n\n        if (shape) callback(shape)\n    }\n\n    // 绘制\n    let draw = () => {\n        this.translateCtx(\n            currentMap,\n            this.mouseEvtData.mapX, \n            this.mouseEvtData.mapY\n        )\n        this.drawAllBoundary()\n    }\n\n    // 判断是否在选择区块中\n    let inHoldBlocks = index => {\n        return currentMap.holdBlocks.includes(currentMap.mouseMoveIndex)\n    }\n\n    /**\n     * @description 回调事件\n     * @param {string} type 事件类型，如:['click','mousemove']\n     * @param {object} data 当前对象\n     * @param {event} evt 鼠标事件 \n     */\n    let callbackEvt = (type, evt, data) => {\n        if (\n            _callback && \n            _callback.hasOwnProperty(type)\n        ) {\n            _callback[type](evt, data)\n        }\n    }\n\n    this.ele.addEventListener('mousemove', evt => {\n        let x = evt.offsetX * this.DPI\n        let y = evt.offsetY * this.DPI\n\n        if (this.inAnimate) return\n\n        // 更新内容\n        if (historyIndex !== this.history.index) {\n            historyIndex = this.history.index\n            currentMap = this.history.map[historyIndex]\n            _blocks = currentMap.blocks\n\n            this.mouseEvtData = {\n                mapX: currentMap.mapTranslateX,\n                mapY: currentMap.mapTranslateY,\n            }\n        }\n\n        // 按住地图时\n        if (evt.buttons && mouseMove.hold) {\n            let _x = x - mouseMove.x + currentMap.mapTranslateX\n            let _y = y - mouseMove.y + currentMap.mapTranslateY\n            \n            if (this.mouseEvtData.mapX - _x || this.mouseEvtData.mapY - _y) {\n                this.mouseEvtData.mapX = _x\n                this.mouseEvtData.mapY = _y\n                \n                mouseMove.status = true\n                draw()\n            }\n        } else {\n            checkInMap(x, y, shape => {\n                let moveIndex = currentMap.mouseMoveIndex\n\n                // 恢复之前鼠标移入对象效果\n                if (shape.index !== moveIndex) {\n                    if (moveIndex > -1) {\n                        _blocks[moveIndex].over = false\n                        draw()\n                    }\n\n                    currentMap.mouseMoveIndex = shape.index\n                    \n                    if (shape.index > -1) {\n                        shape.over = true\n                        callbackEvt('mousemove', evt, shape)\n                        draw()\n                    }\n                } else {\n                    callbackEvt('mousemove', evt, shape)\n                }\n            })\n        }\n\n    })\n\n    this.ele.addEventListener('mousedown', evt => {\n        mouseMove.hold = true\n        mouseMove.x = evt.offsetX * this.DPI\n        mouseMove.y = evt.offsetY * this.DPI\n    })\n\n\n    this.ele.addEventListener('mouseup', evt => {\n        mouseMove.hold = false\n        \n        if (mouseMove.status) {\n            mouseMove.status = false\n\n            // 记录已经移动过的位置\n            currentMap.mapTranslateX = this.mouseEvtData.mapX\n            currentMap.mapTranslateY = this.mouseEvtData.mapY\n\n        } else {\n            let x = evt.offsetX * this.DPI\n            let y = evt.offsetY * this.DPI\n\n            checkInMap(x, y, shape => {\n                if (shape.index === -1) return\n\n                // 存在时，我们移除\n                if (inHoldBlocks(shape.index)) {\n                    let _index = currentMap.holdBlocks.indexOf(shape.index)\n                    \n                    currentMap.holdBlocks.splice(_index, 1)\n                } \n                // 如果不存在，我们添加到存放区\n                else {\n                    if (_selectedMode === 'multiple') {\n                        currentMap.holdBlocks.push(shape.index)\n                    } \n                    else if (_selectedMode === 'single') {\n                        if (currentMap.holdBlocks.length) {\n                            _blocks[currentMap.holdBlocks[0]].style.fillStyle = _BStyle.fillStyle\n                        }\n\n                        currentMap.holdBlocks = [shape.index]\n                    }\n                }\n\n                // 处理存放区内的区块效果\n                currentMap.holdBlocks.forEach(val => {\n                    _blocks[val].style.fillStyle = _BStyle.holdColor\n                })\n\n                draw()\n                callbackEvt('click', evt, shape)\n            })\n        }\n    })\n}","\n\nexport function getEleInfo () {\n    this.ele = document.querySelector(this.options.el)\n    this.eleBCR = this.ele.getBoundingClientRect()\n}\n    \nexport function init () {\n    this.setHistory()\n    this.getEleInfo()\n    this.appendCanvasElement()\n\n    this.setMapData()\n    this.mouseEvt()\n}\n\nexport function setMapData () {\n    let opt = {\n        // 默认地图缩放大小 1\n\t\tmapScale: 1,\n\t\t// 地图边界\n\t\tboundary: {},\n\t\t// 区块\n        blocks: [],\n        // 是否有点\n        hasPoint: false,\n        // 地图移动距离\n\t\tmapTranslateX: 0,\n\t\tmapTranslateY: 0,\n\t\t// hash ID\n\t\tcolorsHash: {},\n\t\t// 当前鼠标移入区索引\n\t\tmouseMoveIndex: -1,\n\t\t// 选择区域\n        holdBlocks: []\n    }\n\n    opt.usrData = this.options.usrData\n\n    opt = this.setBoundary(opt)\n    opt = this.setBlocks(opt)\n    opt = this.setTextName(opt)\n    opt = this.getPoints(opt)\n\n    this.history.map[this.history.index] = opt\n\n    this.setMapScale()\n}\n","\n/**\n * @description 动画\n * @param {Object} opts\n * @param {Number} delay 每帧时间 \n * @param {Number} duration 动画运行时间\n * @param {Function} delta 对进度操作\n * @callback callback 每一帧操作\n * @callback doneback 每一帧操作\n */\nexport function stepAnimate (opts) {\n    let start = new Date\n\n    let id = setInterval(() => {\n        let timePassed = new Date - start\n        let progress = timePassed / opts.duration\n\n        if (progress > 1) progress = 1\n\n        let delta = opts.delta(progress)\n        opts.callback(delta)\n\n        if (progress == 1) {\n            clearInterval(id)\n            if (opts.doneback) opts.doneback()\n        }\n    }, opts.delay || 1000/60)\n}\n\n/**\n * @deprecated 直线运动\n * @param {Number} progress 进度\n */\nexport function linearAni (progress) {\n    return progress\n}\n\nexport function quadAni (progress) {\n    return Math.pow(progress, 5)\n}\n\nexport function backAni (progress) {\n    let x = 2\n    return Math.pow(progress, 2) * ((x+1) * progress - x)\n}\n\nexport function makeEaseInOutAni (delta) {\n    return function(progress) {\n        return 1 - delta(1 - progress)\n    }\n}","import {\n    stepAnimate,\n    linearAni,\n    quadAni,\n    backAni,\n    makeEaseInOutAni\n} from './swing.js'\n\n/**\n * 缓入 从小到1进入\n * @param {number} time 动画时长\n * @param {number} coe 系数\n */\nexport function fadeIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n    \n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            let progress = delta * coe\n            let scaleDelta = progress + (1 - coe)\n            this.ctx.save()\n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * (coe - progress),\n                this.mainCanvas.height / 2 * (coe - progress)\n            )\n            this.ctx.scale(scaleDelta, scaleDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n\n}\n\n/**\n * 缓出 从1到系数缩小淡出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function fadeOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    let _coe = 1 - coe\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = (1 - delta) * coe + _coe \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * coe * delta,\n                this.mainCanvas.height / 2 * coe * delta\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 放大缓出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = delta * coe + 1 \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                - this.ctxW / 2 * delta * coe,\n                - this.ctxH / 2 * delta * coe\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 缩小缓入\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = .3 - delta * coe + 1 \n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                -this.ctxW / 2 * coe * (1 - delta),\n                -this.ctxH / 2 * coe * (1 - delta)\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n","\n/**\n * @returns {Object} - 返回一个生成的canvas元素\n */\nexport function createCanvas () {\n    let canvas = document.createElement('canvas')\n    let W = this.eleBCR.width\n    let H = this.eleBCR.height\n    \n    this.ctxW = canvas.width = W * this.DPI\n    this.ctxH = canvas.height = H * this.DPI\n\n    canvas.style.position = 'absolute'\n    canvas.style.width = W + 'px'\n    canvas.style.height = H + 'px'\n\n    return canvas\n}\n\nexport function appendCanvasElement () {\n    this.mainCanvas = this.createCanvas()\n    this.hitMainCanvas = this.createCanvas()\n\n    this.ctx = this.mainCanvas.getContext('2d')\n    this.hitCtx = this.hitMainCanvas.getContext('2d')\n\n    this.ele.appendChild( this.mainCanvas )\n}\n\n// 生成临时 canvas 保存当前画布信息\nexport function createTemCanvas (ctx = this.ctx) {\n    let ctxW = this.mainCanvas.width\n    let ctxH = this.mainCanvas.height\n    let _canvas = this.createCanvas()\n    let copyCtxImg = ctx.getImageData(0, 0, ctxW, ctxH)\n    \n    _canvas.getContext('2d').putImageData(copyCtxImg, 0, 0)\n    return _canvas\n}\n\n\n/**\n * @description 画布清除\n * @param {Boolean} notHit 不要清除 hitCtx,默认 false 清除\n */\nexport function clearCanvasCtx (notHit) {\n    this.ctx.clearRect(0, 0, this.ctxW, this.ctxH)\n    \n    if (!notHit) {\n        this.hitCtx.clearRect(0, 0, this.ctxW, this.ctxH)\n    }\n}","\n/**\n * @name 获取区块信息\n * @param {Array} data \n */\nexport default function getMapDataInfo (data) {\n    let xArr = []\n    let yArr = []\n    let centroid = {}\n    let coordinates = []\n    \n    for (let i = 0, l = data.length; i < l; i++) {\n        let _data = computedData(data[i])\n        xArr.push(_data.x.start, _data.x.end)\n        yArr.push(_data.y.start, _data.y.end)\n        centroid = _data.centroid\n        coordinates.push( _data.coordinates )\n    }\n\n    let xStart = Math.min.apply({}, xArr)\n    let yStart = Math.min.apply({}, yArr)\n    let xEnd = Math.max.apply({}, xArr)\n    let yEnd = Math.max.apply({}, yArr)\n    let width = xEnd - xStart\n    let height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        coordinates,\n        x: {\n            start: xStart,\n            end: xEnd,\n            center: xStart + width / 2\n        },\n        y: {\n            start: yStart,\n            end: yEnd,\n            center: yStart + height / 2\n        },\n        centroid\n    }\n}\n\n\n/**\n * @name 计算数组的最大值最小值\n * @param {Array} arr - 数组\n */\nfunction computedData (arr) {\n    if (!Array.isArray(arr))\n        return console.warn(`你需要传入数组!`)\n\n    let width = 0\n    let height = 0\n    let xStart = 0\n    let yStart = 0\n    let xEnd = 0\n    let yEnd = 0\n    let xArr = []\n    let yArr = []\n    let data = []\n    let coordinates = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        xArr.push(arr[i])\n        yArr.push(arr[i + 1])\n        coordinates.push([arr[i], arr[i + 1]])\n    }\n\n    xStart = Math.min.apply({}, xArr)\n    xEnd = Math.max.apply({}, xArr)\n\n    yStart = Math.min.apply({}, yArr)\n    yEnd = Math.max.apply({}, yArr)\n\n    width = xEnd - xStart\n    height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        x: {\n            center: xStart + width/2,\n            start: xStart, \n            end: xEnd\n        },\n        y: {\n            center: yStart + height/2,\n            start: yStart, \n            end: yEnd\n        },\n        centroid: getCentroid(arr),\n        coordinates\n    }\n}\n\n/**\n * @name 质点中心\n * @param {Array} arr - 数组\n */\nfunction getCentroid ( arr ) {\n    let twoTimesSignedArea = 0\n    let cxTimes6SignedArea = 0\n    let cyTimes6SignedArea = 0\n\n    let length = arr.length\n\n    for ( let i = 0, l = arr.length; i < l; i+=2) {\n        let _x = parseFloat(arr[i])\n        let _y = parseFloat(arr[i+1])\n        let __x = parseFloat(arr[i+2])\n        let __y = parseFloat(arr[i+3])\n\n        if (i + 3 > arr.length) {\n            __x = parseFloat(arr[0])\n            __y = parseFloat(arr[1])\n        }\n\n        let twoSA = _x * __y - __x * _y\n\n        twoTimesSignedArea += twoSA\n        cxTimes6SignedArea += (_x + __x) * twoSA\n        cyTimes6SignedArea += (_y + __y) * twoSA\n    }\n    \n    let sixSignedArea = 3 * twoTimesSignedArea\n\n    return {\n        x: ~~(cxTimes6SignedArea / sixSignedArea),\n        y: ~~(cyTimes6SignedArea / sixSignedArea)\n    }\n}\n","export function setDPIFontSize (style, DPI) {\n    \n    let reSet = (font) => {\n        let fontArr = font.match(/([\\d\\.]+)(px|em)/)\n        let szie = parseFloat(fontArr[1])\n        let unit = fontArr[2]\n        font = font.replace(fontArr[0], szie * DPI + unit)\n        return font\n    }\n\n    if (!style) return\n\n    Object.keys(style).forEach(val => {\n        if (val === 'font') {\n            style[val] = reSet(style[val])\n        }\n    })\n\n    return style\n}\n\nexport function setCtxState (styleOption, ctx) {\n    ctx.beginPath()\n\n    for (let i in styleOption) {\n        ctx[i] = styleOption[i]\n    }\t\n    return ctx\n}","\nexport function selfStyle (style) {\n    for (let i in style) {\n        this[i] = style[i]\n    }\n}\n\n/**\n * @name 取2个数字之前的随机数据\n * @param {Number} min 最小值\n * @param {Number} max 最大值\n */\nexport function getBetweenRandom (min, max) {\n    return min + max * Math.random()\n}\n\n/**\n * @description 点在多边形内算法，JS判断一个点是否在一个复杂多边形的内部,\n * https://blog.csdn.net/heyangyi_19940703/article/details/78606471\n */\nexport function isInPolygon (checkPoint, polygonPoints) { \n    let counter = 0 \n    let xinters \n    let p1\n    let p2  \n    let pointCount = polygonPoints.length  \n    \n    p1 = polygonPoints[0] \n\n    for (let i = 1; i <= pointCount; i++) {  \n        p2 = polygonPoints[i % pointCount]\n        if (  \n            checkPoint[0] > Math.min(p1[0], p2[0]) &&  \n            checkPoint[0] <= Math.max(p1[0], p2[0])  \n        ) {  \n            if (checkPoint[1] <= Math.max(p1[1], p2[1])) {  \n                if (p1[0] != p2[0]) {  \n                    xinters =  \n                        (checkPoint[0] - p1[0]) *  \n                            (p2[1] - p1[1]) /  \n                            (p2[0] - p1[0]) +  \n                        p1[1];  \n                    if (p1[1] == p2[1] || checkPoint[1] <= xinters) {  \n                        counter++  \n                    }  \n                }  \n            }  \n        }  \n        p1 = p2\n    }  \n    if (counter % 2 == 0) {  \n        return false \n    } else {  \n        return true \n    }  \n}\n\n/**\n * @name 缩放坐标\n * @param {Array} arr 数据\n * @param {Number} scale 缩放大小 \n */\nexport function scaleCoordinates (arr, scale) {\n    let result = []\n    for (let i = 0, l = arr.length; i < l; i++) {\n        result[i] = []\n        let inner = arr[i]\n        for (let n = 0, m = inner.length; n < m; n++) {\n            result[i].push([\n                inner[n][0] * scale,\n                inner[n][1] * scale\n            ])\n        }\n    }\n    return result\n}","import getMapDataInfo from './getMapBlockInfo.js'\nimport { setDPIFontSize } from '../style.js'\nimport {\n    selfStyle,\n    getBetweenRandom,\n    isInPolygon,\n    scaleCoordinates\n} from './methods.js'\n\nexport function setBoundary (opt) {\n    let boundary = this.options.map.boundary\n\n    Object.assign(boundary, getMapDataInfo(boundary.data))\n\n    this.setColorsHashID(opt, boundary, true)\n\n    // 设置最小缩放\n    opt.mapScale = Math.min(\n        this.hitMainCanvas.width / boundary.width, \n        this.hitMainCanvas.height / boundary.height\n    )\n\n    opt.boundary = Object.assign({}, boundary)\n    opt.mapTranslateX = 0\n    opt.mapTranslateY = 0\n\n    return opt\n}\n\n\nexport function setBlocks (opt) {\n    const blocks = this.options.map.blocks\n    const areas = blocks.data\n    let _BC = blocks.color\n    let colorIsArr = Array.isArray(_BC)\n    let colorLen = colorIsArr ? _BC.length : 0\n\n    for (let i = 0, l = areas.length; i < l; i++) {\n        let _data = areas[i]\n        let _style = blocks.style\n\n        // 1.优先使用块内样式\n        if (_data.style && _data.style.hasOwnProperty('block')) {\n            _style = _data.style.block\n        }\n        // 随机色或自定颜色\n        if (!_data.style && blocks.color) {\n\n            if (colorIsArr) {\n                _style.fillStyle = _BC[ i % colorLen ]\n            } \n            else if (typeof _BC === 'boolean') {\n                _style.fillStyle = this.getRandomColor()\n            }\n        }\n\n        _data = Object.assign({}, _data, getMapDataInfo(_data.map), {\n            style: new selfStyle( _style ),\n            index: i,\n            over: false,\n            hold: false\n        })\n        \n        this.setColorsHashID(opt, _data)\n\n        opt.blocks.push(_data)\n    }\n\n    return opt\n}\n\n\n/**\n * 设置文字\n * @description 对文字的大小按屏幕地 devicePixelRatio 缩放\n */\nexport function setTextName (map) {\n    // 获取区块名称用户设置\n    let cityName = this.options.map.blocks.cityName\n\n    if (!cityName) return map\n\n    // 判断是否已经处理过高清屏文字\n    if (!cityName.fixed) {\n        Object.keys(cityName).forEach(name => {\n            Object.assign(\n                cityName[name], \n                setDPIFontSize(cityName[name], this.DPI)\n            )\n        })\n    }\n\n    // 检查是否有默认的属性\n    if (!cityName.hasOwnProperty('normal')) {\n        return console.warn(`Don't find cityName has 'normal'`)\n    }\n\n    map.blocks.forEach(val => {\n        val.nameStyle = {\n            normal: new selfStyle(cityName.normal),\n            hover: new selfStyle(cityName.hover ? cityName.hover : cityName.normal)\n        }\n    })\n\n    cityName.fixed = true\n\n    return map\n}\n\n/**\n * 设置区块内的点\n */\nexport function getPoints (map) {\n    let blocks = this.options.map.blocks\n    let point = blocks.point\n\n    if (!point) return map\n\n    map.hasPoint = true\n\n    let minR = Math.min.apply({}, point.r)\n    let maxR = Math.max.apply({}, point.r)\n\n    let getPoint = val => {\n        let x = -1\n        let y = -1\n        while (true) {\n            x = ~~getBetweenRandom(val.x.start, val.x.end)\n            y = ~~getBetweenRandom(val.y.start, val.y.end)\n            if (isInPolygon([x,y], val.coordinates[0])) {\n                return [x,y]\n            }\n        }\n    }\n\n    map.blocks.forEach((val, index) => {\n        if (point.size) {\n            let size = point.size\n            let pointSize = 1\n            let hasUserSet = false\n            let _blockPointSize\n\n            if (val.blocks && val.blocks.point && val.blocks.point.size) {\n                _blockPointSize = val.blocks.point.size\n                hasUserSet = true\n\n                if (Array.isArray(_blockPointSize)) {\n                    hasUserSet = 'array'\n                    pointSize = _blockPointSize.length\n                } else if (!isNaN(_blockPointSize)) {\n                    pointSize = _blockPointSize\n                }\n            } else {\n                if (size.min !== size.max) {\n                    pointSize = ~~getBetweenRandom(size.min, size.max)\n                }\n            }\n\n            val.point = []\n\n            for (let i = 0; i < pointSize; i++) {\n                let { x, y } = val.centroid\n                let usrSet = {}\n\n                if (point.fun) {\n                    usrSet = point.fun( index, val, this.options.usrData )\n                }\n\n                if (size.min !== size.max) [x,y] = getPoint(val)\n\n                let color = ''\n                let r = 0\n\n                if (hasUserSet && hasUserSet === 'array') {\n                    color = 'color' in _blockPointSize[i] ?\n                        _blockPointSize[i].color :\n                        point.color[~~getBetweenRandom(0, point.color.length)]\n\n                    r = 'r' in _blockPointSize[i] ?\n                        _blockPointSize[i].r :\n                        getBetweenRandom(minR, maxR)\n                } else {\n                    color = point.color[~~getBetweenRandom(0, point.color.length)]\n\n                    r = getBetweenRandom(minR, maxR)\n                }\n\n                usrSet = Object.assign({}, {\n                    r,\n                    color,\n                    position: {x, y}\n                }, usrSet)\n\n                usrSet.r *= this.DPI\n\n                val.point.push(usrSet)\n            }\n        }\n    })\n\n    return map\n}\n\n/**\n * 缩放地图\n * @param {number} val 缩放地图\n */\nexport function setMapScale (val) {\n    let history = this.history\n    let currentMap = history.map[history.index]\n    let defVal = currentMap.mapScale\n\n    history.map[history.index].mapScale = val || defVal\n\n    this.scaleBoundary(currentMap)\n    this.scaleBlocks(currentMap)\n    this.scalePoints(currentMap)\n}\n\n/**\n * 缩放边界\n */\nexport function scaleBoundary (map) {\n    if (map.mapTranslateX === 0) {\n        map.mapTranslateX =  0 - map.boundary.x.start * map.mapScale\n        map.mapTranslateY = 0 - map.boundary.y.start * map.mapScale\n    }\n    \n    map.boundary._coordinates = scaleCoordinates(map.boundary.coordinates, map.mapScale)\n}\n\n/**\n * 缩放块\n * @param {object} map 当前地图\n */\nexport function scaleBlocks (map) {\n    for (let i = 0, l = map.blocks.length; i < l; i++) {\n        let inner = map.blocks[i]\n        inner._coordinates = scaleCoordinates(inner.coordinates, map.mapScale)\n    }\n}\n\n/**\n * 缩放点的位置\n * @param {object} map 当前地图\n */\nexport function scalePoints (map) {\n    let blocks = map.blocks\n\n    if (!map.hasPoint) return\n\n    for (let i = 0, l = blocks.length; i < l; i++) {\n        blocks[i]._point = []\n        let pointL = blocks[i].point.length\n\n        for (let p = 0; p < pointL; p++) {\n            let point = blocks[i].point[p]\n\n            blocks[i]._point.push( {\n                x: point.position.x * map.mapScale,\n                y: point.position.y * map.mapScale,\n                r: point.r,\n                color: point.color\n            })\n        }\n    }\n}\n\n\n/**\n * 备案区块信息\n * @param {object} map 当前地图\n * @param {object} data 区块信息\n * @param {boolean} transparentBg 背景透明化\n */\nexport function setColorsHashID (map, data, transparentBg = false) {\n    let hash = map.colorsHash\n\n    while (true) {\n        const colorKey = this.getRandomColor()\n\n        if (!hash[colorKey]) {\n            hash[colorKey] = data\n            data.hitStyle = new selfStyle({\n                fillStyle: transparentBg ? 'rgba(0,0,0,0)' :  colorKey\n            })\n            return\n        }\n    }\n}\n\n/**\n * 随机生成 RGB 颜色\n */\nexport function getRandomColor () {\n    const r = Math.round(Math.random() * 255)\n    const g = Math.round(Math.random() * 255)\n    const b = Math.round(Math.random() * 255)\n    return `rgb(${r},${g},${b})`\n}\n\nexport function hasSameHashColor (color, shape) {\n    return shape.color === color\n}\n\n\n/**\n * 缩放地图\n * @param {number} val 缩放大小\n */\nexport function scaleMap (val) {\n    let currentMap = this.history.map[this.history.index]\n\n    this.setMapScale(val)\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n\n    window.requestAnimationFrame(() => this.drawAllBoundary() )\n}\n\nexport function getLikeGeoJson (arr) {\n    let result = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        result.push([arr[i], arr[i+1]])\n    }\n    return result\n}\n","\n/**\n * @name 绘制所有区块\n */\nexport function drawAllBoundary () {\n    let currentMap = this.history.map[this.history.index]\n\n    this.clearCanvasCtx()\n    // 区\n    this.drawBlockBoundary(currentMap)\n    // 边界\n    this.drawMainBoundary(currentMap)\n    // 点\n    this.drawBlockPoints(currentMap)\n    // 城市名\n    this.drawBlockText(currentMap)\n    \n    this.ctx.setTransform(1, 0, 0, 1, 0, 0)\n    this.hitCtx.setTransform(1, 0, 0, 1, 0, 0)\n}\n\n/**\n * @name 绘制内部区块\n * @param {Object} obj 绘制的区块信息\n */\nexport function drawBoundary (obj) {\n    let style = obj.style\n    let fillStyle = style.fillStyle\n    let styleOption = {}\n\n    if (obj.hold) {\n        fillStyle = style.holdColor || fillStyle\n    } else {\n        fillStyle = obj.over ? style.hoverColor : fillStyle\n    }\n\n    styleOption = {\n        fillStyle,\n        lineWidth: style.lineWidth,\n        strokeStyle: style.strokeStyle\n    }\n\n    for (let i = 0, l = obj._coordinates.length; i < l; i++) {\n        let ctx = this.drawLine(\n            this.ctx,\n            obj._coordinates[i],\n            styleOption\n        )\n\n        this.drawLine(\n            this.hitCtx,\n            obj._coordinates[i],\n            obj.hitStyle\n        )\n    }\n}\n\n/**\n * 绘制主要边界\n */\nexport function drawMainBoundary (map) {\n    this.drawBoundary(map.boundary)\n}\n\n/**\n * 绘制区块边界\n */\nexport function drawBlockBoundary (map) {\n    let l = map.blocks.length\n\n    for (let i = 0; i < l; i++) {\n        this.drawBoundary( map.blocks[i] )\n    }\n}\n\n/**\n * @name 绘制圆\n * @param {Object} ctx canvas 对象\n * @param {Object} option 设置\n * @param {Objetc} style 样式\n */\nexport function drawArc (ctx, option, style) {\n    ctx = this.setCtxState(style, ctx)\n    ctx.arc(\n        option.x, // x\n        option.y, // y\n        option.r, // R 半径\n        option.s, // 开始角度\n        option.e, // 结束角度\n        option.d  // 顺时针(false)\n    )\n    ctx.fill()\n    ctx.closePath()\n    ctx.restore()\n}\n\n/**\n * 绘制名字\n * @param {object} map 当前地图信息\n */\nexport function drawBlockText (map, ctx = this.ctx) {\n    \n    let cityName = this.options.map.blocks.cityName\n    if (!cityName) return\n\n    let blocks = map.blocks\n    let move = cityName.move || {x: 0, y: 0}\n\n    for (let i = 0, l = blocks.length; i < l; i++) {\n        let city = blocks[i]\n        let style = false\n        let width = city.width * map.mapScale\n        let txtWidth = ctx.measureText(city.name).width\n\n        if (city.name) {\n            if (city.hold) {\n                style = city.nameStyle.hold\n            } else if (city.over) {\n                style = city.nameStyle.hover\n            }\n\n            if (!style) {\n                style = city.nameStyle.normal\n            }\n\n            if (txtWidth < width / this.textVsWidth || city.index === map.mouseMoveIndex) {\n                let x = city.centroid.x * map.mapScale + move.x\n                let y = city.centroid.y * map.mapScale + move.y\n\n                ctx.save()\n                ctx.shadowColor = 'rgba(128, 128, 128, .8)'\n                ctx.shadowOffsetX = this.DPI\n                ctx.shadowOffsetY = this.DPI\n                \n                this.drawText({\n                    txt: city.name,\n                    x,\n                    y,\n                    align: cityName.align\n                }, style, ctx)\n                ctx.restore()\n            }\n        }\n    }\n}\n\n/**\n * 绘制文字\n * @param {object} textObj 文字信息\n * @param {object} style 样式\n * @param {canvas} ctx canvas\n */\nexport function drawText (textObj, style, ctx = this.ctx) {\n    let {txt, x, y, align} = textObj\n   \n    ctx.save()\n    ctx = this.setCtxState(style, ctx)\n    ctx.textAlign = align || 'center'\n    ctx.textBaseline = \"middle\"\t\n    ctx.fillText(txt, x, y)\t\t\n    ctx.restore()\n}\n\n/**\n * 中心坐标 \n */\nexport function drawCenterLine () {\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(0, this.ctxH/2)\n    this.ctx.lineTo(this.ctxW, this.ctxH/2)\n    this.ctx.stroke()\n\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(this.ctxW/2,0)\n    this.ctx.lineTo(this.ctxW/2, this.ctxH)\n    this.ctx.stroke()\n}\n\n/**\n * 绘制区块中随机点\n */\nexport function drawBlockPoints (map) {\n    const data = map.blocks\n\n    if (!map.hasPoint) return map\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let _W = data[i].width * map.mapScale\n\n        data[i]._point.forEach(point => {\n            // 当宽度大于5倍点半径时，点才显示\n            if (_W > point.r * 5) {\n                this.drawArc(\n                    this.ctx,\n                    {\n                        x: point.x,\n                        y: point.y,\n                        r: point.r,\n                        s: 0,\n                        e: Math.PI * 2,\n                        d: false\n                    },\n                    {\n                        fillStyle: point.color\n                    }\n                )\n            }\n        })\n    }\n}\n\n\n/**\n * @name 绘制线\n * @param {Object} ctx - canvas 对象\n * @param {Array} data - 绘制的线\n * @param {Object} style - 绘制的样式\n */\nexport function drawLine (ctx, data, style) {\n    ctx = this.setCtxState(style, ctx)\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let x = data[i][0]\n        let y = data[i][1]\n        if (i === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    }\n    \n    ctx.lineJoin = 'round'\n    ctx.closePath()\n    ctx.stroke()\n    ctx.fill()\n\n    return ctx\n}\n\n/**\n * \n * @param {object} map 地图\n * @param {number} x x轴偏移量\n * @param {number} y y轴偏移量\n */\nexport function translateCtx (map, x = 0, y = 0) {\n    let X = (this.ctxW - map.boundary.width * map.mapScale)/ 2 + x\n    let Y = (this.ctxH - map.boundary.height * map.mapScale)/ 2 + y\n\n    this.clearCanvasCtx()\n    this.ctx.translate(X, Y)\n    this.hitCtx.translate(X, Y)\n}\n","export class History {\n\n    constructor () {\n        this.map = [],\n        this.index = 0\n    }\n\n    go (val) {\n        console.log(`go ${val}`)\n        let history = this.constructor.history\n        let mapSize = history.map.length\n        \n        if (isNaN(val)) {\n            return console.warn(`val is not a Number`)\n        }\n\n        val = parseInt(val)\n        if (!val) return\n\n        // 重置新的地图状态\n        let i = history.index\n        let max = mapSize -1\n        i += val\n        \n        if (val > 0) {\n            i = i >  max ? i = max : i\n        } else {\n            i = i < 0 ? 0 : i\n        }\n        \n        this.constructor.zoomOut()\n        this.constructor.history.index = i\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    back () {\n        // 重置新的地图状态\n        let i = this.constructor.history.index\n\n        if (!i) return\n\n        this.constructor.fadeOut()\n\n        this.constructor.history.index = i -1 > 0 ? i -1 : 0\n\n        setTimeout(() => {\n            this.constructor.zoomIn()\n        }, 1000)\n    }\n\n    forward () {\n        let history = this.constructor.history\n        let i = history.index\n        // 重置新的地图状态\n        i += 1\n\n        if (i >= history.map.length) return\n\n        this.constructor.history.index = i\n\n        this.constructor.zoomOut()\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    // key 用于区分渲染\n    push ({boundary, blocks, key, usrData} = opt) {\n        let _ = this.constructor\n        let _H = _.history\n        let setNewMap = () => {\n            let optMap = _.options.map\n    \n            optMap.boundary.data = boundary\n            optMap.blocks.data = blocks\n            _.options.usrData = usrData || {}\n            // 重置地图数据\n            _.setMapData()\n    \n            _H.map[_H.index].parentID = key\n        }\n        \n        _.zoomOut()\n        _H.index += 1\n        \n        let oldMap = _H.map[_H.index]\n        \n        if (oldMap) {\n            if (oldMap.parentID !== key) {\n                _H.map.length = _H.index\n                setNewMap()\n            }\n        } else {\n            setNewMap()\n        }\n\n        setTimeout(() => {\n            _.fadeIn()\n        }, 1000)\n    }\n}\n\nexport function setHistory () {\n    this.history = new this.History()\n    this.history.__proto__.constructor = this\n}","/**\n * CMAP\n * @description Canvas 地图\n * @version 2.0.0\n * @author ekxt <https://ektx.github.io/>\n * @see https://github.com/ektx/canvas-map\n * @date 2017-10-27\n */\n\nimport * as event from './event/index.js'\nimport * as init from './init.js'\nimport * as animate from './animate/index.js'\nimport * as canvas from './canvas.js'\nimport * as compute from './compute/index.js'\nimport * as draw from './draw.js'\nimport * as style from './style.js'\nimport * as history from './history.js'\n\nconst myCmap = {\n\t...event,\n\t...init,\n\t...animate,\n\t...canvas,\n\t...compute,\n    ...draw,\n\t...style,\n\t...history\n}\n\nclass CMap {\n\tconstructor (options) {\n\t\tthis.options = options\n\t\tthis.DPI = window.devicePixelRatio\n\t\tthis.mainCanvas = null\n\t\tthis.ctx = null\n\t\tthis.hitCtx = null\n\t\tthis.ctxW = 0\n\t\tthis.ctxH = 0\n\t\tthis.inAnimate = false\n\t\t// 文字与区块宽度比（文字最大可用大小）\n\t\tthis.textVsWidth = 2\n\t}\n}\n\nObject.keys(myCmap).forEach(name => {\n\tObject.defineProperty(CMap.prototype, name, {\n\t\tvalue: myCmap[name]\n\t})\n})\n\nexport default CMap"],"names":["mouseEvt","historyIndex","currentMap","_blocks","_opt","this","options","_callback","callback","selectedMode","_selectedMode","style","_BStyle","map","blocks","mouseMove","hold","x","y","status","checkInMap","index","pixel","hitCtx","getImageData","data","color","shape","colorsHash","draw","translateCtx","mouseEvtData","mapX","mapY","drawAllBoundary","callbackEvt","type","evt","hasOwnProperty","ele","addEventListener","offsetX","DPI","offsetY","inAnimate","history","mapTranslateX","mapTranslateY","buttons","_x","_y","moveIndex","mouseMoveIndex","over","holdBlocks","includes","inHoldBlocks","_index","indexOf","splice","push","length","fillStyle","forEach","val","holdColor","getEleInfo","document","querySelector","el","eleBCR","getBoundingClientRect","init","setHistory","appendCanvasElement","setMapData","opt","mapScale","boundary","hasPoint","usrData","setBoundary","setBlocks","setTextName","getPoints","setMapScale","stepAnimate","opts","start","Date","id","setInterval","progress","duration","delta","clearInterval","doneback","delay","quadAni","Math","pow","backAni","makeEaseInOutAni","fadeIn","time","coe","_canvas","createTemCanvas","clearCanvasCtx","scaleDelta","ctx","save","globalAlpha","translate","mainCanvas","width","height","scale","drawImage","restore","fadeOut","_coe","reDelta","zoomOut","ctxW","ctxH","zoomIn","createCanvas","canvas","createElement","W","H","position","hitMainCanvas","getContext","appendChild","copyCtxImg","putImageData","notHit","clearRect","getMapDataInfo","xArr","yArr","centroid","coordinates","i","l","_data","computedData","end","xStart","min","apply","yStart","xEnd","max","yEnd","center","arr","Array","isArray","console","warn","getCentroid","twoTimesSignedArea","cxTimes6SignedArea","cyTimes6SignedArea","parseFloat","__x","__y","twoSA","sixSignedArea","setDPIFontSize","Object","keys","font","fontArr","match","szie","unit","replace","reSet","setCtxState","styleOption","beginPath","selfStyle","getBetweenRandom","random","isInPolygon","checkPoint","polygonPoints","xinters","p1","p2","counter","pointCount","scaleCoordinates","result","inner","n","m","assign","setColorsHashID","areas","_BC","colorIsArr","colorLen","_style","block","getRandomColor","cityName","fixed","name","nameStyle","normal","hover","point","minR","r","maxR","getPoint","size","_blockPointSize","pointSize","hasUserSet","isNaN","usrSet","fun","defVal","scaleBoundary","scaleBlocks","scalePoints","_coordinates","_point","pointL","p","transparentBg","hash","colorKey","hitStyle","round","hasSameHashColor","scaleMap","window","requestAnimationFrame","getLikeGeoJson","drawBlockBoundary","drawMainBoundary","drawBlockPoints","drawBlockText","setTransform","drawBoundary","obj","hoverColor","lineWidth","strokeStyle","drawLine","drawArc","option","arc","s","e","d","fill","closePath","move","city","txtWidth","measureText","textVsWidth","shadowColor","shadowOffsetX","shadowOffsetY","drawText","txt","align","textObj","textAlign","textBaseline","fillText","drawCenterLine","moveTo","lineTo","stroke","_W","PI","lineJoin","X","Y","History","[object Object]","log","constructor","mapSize","parseInt","setTimeout","key","_","_H","setNewMap","optMap","parentID","oldMap","__proto__","myCmap","event","animate","compute","CMap","devicePixelRatio","defineProperty","prototype","value"],"mappings":"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"}