{"version":3,"file":"CMap.min.js","sources":["../src/event/index.js","../src/init.js","../src/animate/swing.js","../src/animate/index.js","../src/canvas.js","../src/compute/getMapBlockInfo.js","../src/style.js","../src/compute/methods.js","../src/compute/index.js","../src/draw.js","../src/history.js","../src/index.js"],"sourcesContent":["export function mouseEvt () {\n    let historyIndex = -1\n    let currentMap = null\n    let _blocks = null\n    let _opt = this.options\n    let _callback = _opt.callback\n    let { selectedMode: _selectedMode, \n        style: _BStyle} = _opt.map.blocks\n    let mouseMove = {\n        hold: false,\n        x: 0,\n        y: 0,\n        status: false // 记录是否有移动\n    }\n\n    /**\n     * 判断是否在区块中\n     * @param {number} x x轴移动    \n     * @param {number} y y轴移动\n     * @callback 回调函数\n     */\n    let checkInMap = (x, y, callback) => {\n        const pixel = this.hitCtx.getImageData(x, y, 1, 1).data\n        const color = `rgb(${pixel[0]},${pixel[1]},${pixel[2]})`\n        const shape = currentMap.colorsHash[color] || {index: -1}\n\n        if (shape) callback(shape)\n    }\n\n    // 绘制\n    let draw = () => {\n        this.translateCtx(\n            currentMap,\n            this.mouseEvtData.mapX, \n            this.mouseEvtData.mapY\n        )\n        this.drawAllBoundary()\n    }\n\n    // 判断是否在选择区块中\n    let inHoldBlocks = index => {\n        return currentMap.holdBlocks.includes(currentMap.mouseMoveIndex)\n    }\n\n    /**\n     * @description 回调事件\n     * @param {string} type 事件类型，如:['click','mousemove']\n     * @param {object} data 当前对象\n     * @param {event} evt 鼠标事件 \n     */\n    let callbackEvt = (type, evt, data) => {\n        if (\n            _callback && \n            _callback.hasOwnProperty(type)\n        ) {\n            _callback[type](evt, data)\n        }\n    }\n\n    this.ele.addEventListener('mousemove', evt => {\n        let x = evt.offsetX * this.DPI\n        let y = evt.offsetY * this.DPI\n\n        if (this.inAnimate) return\n\n        // 更新内容\n        if (historyIndex !== this.history.index) {\n            historyIndex = this.history.index\n            currentMap = this.history.map[historyIndex]\n            _blocks = currentMap.blocks\n\n            this.mouseEvtData = {\n                mapX: currentMap.mapTranslateX,\n                mapY: currentMap.mapTranslateY,\n            }\n        }\n\n        // 按住地图时\n        if (evt.buttons && mouseMove.hold) {\n            mouseMove.status = true\n\n            this.mouseEvtData.mapX = x - mouseMove.x + currentMap.mapTranslateX\n            this.mouseEvtData.mapY = y - mouseMove.y + currentMap.mapTranslateY\n\n            draw()\n        } else {\n            checkInMap(x, y, shape => {\n                let moveIndex = currentMap.mouseMoveIndex\n\n                // 恢复之前鼠标移入对象效果\n                if (shape.index !== moveIndex) {\n                    if (moveIndex > -1) {\n                        _blocks[moveIndex].style.fillStyle = inHoldBlocks(moveIndex) ? _BStyle.holdColor : _BStyle.fillStyle\n                        draw()\n                    }\n\n                    if (shape.index === -1) {\n                        currentMap.mouseMoveIndex = shape.index\n                        return\n                    }\n\n                    if (_blocks[shape.index]) {\n                        _blocks[shape.index].style.fillStyle = _BStyle.hoverColor\n                        currentMap.mouseMoveIndex = shape.index\n                    }\n                    \n                    callbackEvt('mousemove', evt, shape)\n                    draw()\n                }\n            })\n        }\n\n    })\n\n    this.ele.addEventListener('mousedown', evt => {\n        mouseMove.hold = true\n        mouseMove.x = evt.offsetX * this.DPI\n        mouseMove.y = evt.offsetY * this.DPI\n    })\n\n\n    this.ele.addEventListener('mouseup', evt => {\n        mouseMove.hold = false\n        \n        if (mouseMove.status) {\n            mouseMove.status = false\n\n            // 记录已经移动过的位置\n            currentMap.mapTranslateX = this.mouseEvtData.mapX\n            currentMap.mapTranslateY = this.mouseEvtData.mapY\n\n        } else {\n            let x = evt.offsetX * this.DPI\n            let y = evt.offsetY * this.DPI\n\n            checkInMap(x, y, shape => {\n                if (shape.index === -1) return\n\n                // 存在时，我们移除\n                if (inHoldBlocks(shape.index)) {\n                    let _index = currentMap.holdBlocks.indexOf(shape.index)\n                    \n                    currentMap.holdBlocks.splice(_index, 1)\n                } \n                // 如果不存在，我们添加到存放区\n                else {\n                    if (_selectedMode === 'multiple') {\n                        currentMap.holdBlocks.push(shape.index)\n                    } \n                    else if (_selectedMode === 'single') {\n                        if (currentMap.holdBlocks.length) {\n                            _blocks[currentMap.holdBlocks[0]].style.fillStyle = _BStyle.fillStyle\n                        }\n\n                        currentMap.holdBlocks = [shape.index]\n                    }\n                }\n\n                // 处理存放区内的区块效果\n                currentMap.holdBlocks.forEach(val => {\n                    _blocks[val].style.fillStyle = _BStyle.holdColor\n                })\n\n                draw()\n                callbackEvt('click', evt, shape)\n            })\n        }\n    })\n}","\n\nexport function getEleInfo () {\n    this.ele = document.querySelector(this.options.el)\n    this.eleBCR = this.ele.getBoundingClientRect()\n}\n    \nexport function init () {\n    this.setHistory()\n    this.getEleInfo()\n    this.appendCanvasElement()\n\n    this.setMapData()\n    this.mouseEvt()\n}\n\nexport function setMapData () {\n    let opt = {\n        // 默认地图缩放大小 1\n\t\tmapScale: 1,\n\t\t// 地图边界\n\t\tboundary: {},\n\t\t// 区块\n        blocks: [],\n        // 是否有点\n        hasPoint: false,\n        // 地图移动距离\n\t\tmapTranslateX: 0,\n\t\tmapTranslateY: 0,\n\t\t// hash ID\n\t\tcolorsHash: {},\n\t\t// 当前鼠标移入区索引\n\t\tmouseMoveIndex: -1,\n\t\t// 选择区域\n\t\tholdBlocks: []\n    }\n\n    opt = this.setBoundary(opt)\n    opt = this.setBlocks(opt)\n    opt = this.setTextName(opt)\n    opt = this.getPoints(opt)\n\n    this.history.map[this.history.index] = opt\n\n    this.setMapScale()\n}\n","\n/**\n * @description 动画\n * @param {Object} opts\n * @param {Number} delay 每帧时间 \n * @param {Number} duration 动画运行时间\n * @param {Function} delta 对进度操作\n * @callback callback 每一帧操作\n * @callback doneback 每一帧操作\n */\nexport function stepAnimate (opts) {\n    let start = new Date\n\n    let id = setInterval(() => {\n        let timePassed = new Date - start\n        let progress = timePassed / opts.duration\n\n        if (progress > 1) progress = 1\n\n        let delta = opts.delta(progress)\n        opts.callback(delta)\n\n        if (progress == 1) {\n            clearInterval(id)\n            if (opts.doneback) opts.doneback()\n        }\n    }, opts.delay || 1000/60)\n}\n\n/**\n * @deprecated 直线运动\n * @param {Number} progress 进度\n */\nexport function linearAni (progress) {\n    return progress\n}\n\nexport function quadAni (progress) {\n    return Math.pow(progress, 5)\n}\n\nexport function backAni (progress) {\n    let x = 2\n    return Math.pow(progress, 2) * ((x+1) * progress - x)\n}\n\nexport function makeEaseInOutAni (delta) {\n    return function(progress) {\n        return 1 - delta(1 - progress)\n    }\n}","import {\n    stepAnimate,\n    linearAni,\n    quadAni,\n    backAni,\n    makeEaseInOutAni\n} from './swing.js'\n\n/**\n * 缓入 从小到1进入\n * @param {number} time 动画时长\n * @param {number} coe 系数\n */\nexport function fadeIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n    \n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            let progress = delta * coe\n            let scaleDelta = progress + (1 - coe)\n            this.ctx.save()\n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * (coe - progress),\n                this.mainCanvas.height / 2 * (coe - progress)\n            )\n            this.ctx.scale(scaleDelta, scaleDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n\n}\n\n/**\n * 缓出 从1到系数缩小淡出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function fadeOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    let _coe = 1 - coe\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = (1 - delta) * coe + _coe \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * coe * delta,\n                this.mainCanvas.height / 2 * coe * delta\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 放大缓出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = delta * coe + 1 \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                - this.ctxW / 2 * delta * coe,\n                - this.ctxH / 2 * delta * coe\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 缩小缓入\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = .3 - delta * coe + 1 \n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                -this.ctxW / 2 * coe * (1 - delta),\n                -this.ctxH / 2 * coe * (1 - delta)\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n","\n/**\n * @returns {Object} - 返回一个生成的canvas元素\n */\nexport function createCanvas () {\n    let canvas = document.createElement('canvas')\n    let W = this.eleBCR.width\n    let H = this.eleBCR.height\n    \n    this.ctxW = canvas.width = W * this.DPI\n    this.ctxH = canvas.height = H * this.DPI\n\n    canvas.style.position = 'absolute'\n    canvas.style.width = W + 'px'\n    canvas.style.height = H + 'px'\n\n    return canvas\n}\n\nexport function appendCanvasElement () {\n    this.mainCanvas = this.createCanvas()\n    this.hitMainCanvas = this.createCanvas()\n\n    this.ctx = this.mainCanvas.getContext('2d')\n    this.hitCtx = this.hitMainCanvas.getContext('2d')\n\n    this.ele.appendChild( this.mainCanvas )\n}\n\n// 生成临时 canvas 保存当前画布信息\nexport function createTemCanvas (ctx = this.ctx) {\n    let ctxW = this.mainCanvas.width\n    let ctxH = this.mainCanvas.height\n    let _canvas = this.createCanvas()\n    let copyCtxImg = ctx.getImageData(0, 0, ctxW, ctxH)\n    \n    _canvas.getContext('2d').putImageData(copyCtxImg, 0, 0)\n    return _canvas\n}\n\n\n/**\n * @description 画布清除\n * @param {Boolean} notHit 不要清除 hitCtx,默认 false 清除\n */\nexport function clearCanvasCtx (notHit) {\n    this.ctx.clearRect(0, 0, this.ctxW, this.ctxH)\n    \n    if (!notHit) {\n        this.hitCtx.clearRect(0, 0, this.ctxW, this.ctxH)\n    }\n}","\n/**\n * @name 获取区块信息\n * @param {Array} data \n */\nexport default function getMapDataInfo (data) {\n    let xArr = []\n    let yArr = []\n    let centroid = {}\n    let coordinates = []\n    \n    for (let i = 0, l = data.length; i < l; i++) {\n        let _data = computedData(data[i])\n        xArr.push(_data.x.start, _data.x.end)\n        yArr.push(_data.y.start, _data.y.end)\n        centroid = _data.centroid\n        coordinates.push( _data.coordinates )\n    }\n\n    let xStart = Math.min.apply({}, xArr)\n    let yStart = Math.min.apply({}, yArr)\n    let xEnd = Math.max.apply({}, xArr)\n    let yEnd = Math.max.apply({}, yArr)\n    let width = xEnd - xStart\n    let height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        coordinates,\n        x: {\n            start: xStart,\n            end: xEnd,\n            center: xStart + width / 2\n        },\n        y: {\n            start: yStart,\n            end: yEnd,\n            center: yStart + height / 2\n        },\n        centroid\n    }\n}\n\n\n/**\n * @name 计算数组的最大值最小值\n * @param {Array} arr - 数组\n */\nfunction computedData (arr) {\n    if (!Array.isArray(arr))\n        return console.warn(`你需要传入数组!`)\n\n    let width = 0\n    let height = 0\n    let xStart = 0\n    let yStart = 0\n    let xEnd = 0\n    let yEnd = 0\n    let xArr = []\n    let yArr = []\n    let data = []\n    let coordinates = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        xArr.push(arr[i])\n        yArr.push(arr[i + 1])\n        coordinates.push([arr[i], arr[i + 1]])\n    }\n\n    xStart = Math.min.apply({}, xArr)\n    xEnd = Math.max.apply({}, xArr)\n\n    yStart = Math.min.apply({}, yArr)\n    yEnd = Math.max.apply({}, yArr)\n\n    width = xEnd - xStart\n    height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        x: {\n            center: xStart + width/2,\n            start: xStart, \n            end: xEnd\n        },\n        y: {\n            center: yStart + height/2,\n            start: yStart, \n            end: yEnd\n        },\n        centroid: getCentroid(arr),\n        coordinates\n    }\n}\n\n/**\n * @name 质点中心\n * @param {Array} arr - 数组\n */\nfunction getCentroid ( arr ) {\n    let twoTimesSignedArea = 0\n    let cxTimes6SignedArea = 0\n    let cyTimes6SignedArea = 0\n\n    let length = arr.length\n\n    for ( let i = 0, l = arr.length; i < l; i+=2) {\n        let _x = parseFloat(arr[i])\n        let _y = parseFloat(arr[i+1])\n        let __x = parseFloat(arr[i+2])\n        let __y = parseFloat(arr[i+3])\n\n        if (i + 3 > arr.length) {\n            __x = parseFloat(arr[0])\n            __y = parseFloat(arr[1])\n        }\n\n        let twoSA = _x * __y - __x * _y\n\n        twoTimesSignedArea += twoSA\n        cxTimes6SignedArea += (_x + __x) * twoSA\n        cyTimes6SignedArea += (_y + __y) * twoSA\n    }\n    \n    let sixSignedArea = 3 * twoTimesSignedArea\n\n    return {\n        x: ~~(cxTimes6SignedArea / sixSignedArea),\n        y: ~~(cyTimes6SignedArea / sixSignedArea)\n    }\n}\n","export function setDPIFontSize (style, DPI) {\n    \n    let reSet = (font) => {\n        let fontArr = font.match(/([\\d\\.]+)(px|em)/)\n        let szie = parseFloat(fontArr[1])\n        let unit = fontArr[2]\n        font = font.replace(fontArr[0], szie * DPI + unit)\n        return font\n    }\n\n    if (!style) return\n\n    Object.keys(style).forEach(val => {\n        if (val === 'font') {\n            style[val] = reSet(style[val])\n        }\n    })\n\n    return style\n}\n\nexport function setCtxState (styleOption, ctx) {\n    ctx.beginPath()\n\n    for (let i in styleOption) {\n        ctx[i] = styleOption[i]\n    }\t\n    return ctx\n}","\nexport function selfStyle (style) {\n    for (let i in style) {\n        this[i] = style[i]\n    }\n}\n\n/**\n * @name 取2个数字之前的随机数据\n * @param {Number} min 最小值\n * @param {Number} max 最大值\n */\nexport function getBetweenRandom (min, max) {\n    return min + max * Math.random()\n}\n\n/**\n * @description 点在多边形内算法，JS判断一个点是否在一个复杂多边形的内部,\n * https://blog.csdn.net/heyangyi_19940703/article/details/78606471\n */\nexport function isInPolygon (checkPoint, polygonPoints) { \n    let counter = 0 \n    let xinters \n    let p1\n    let p2  \n    let pointCount = polygonPoints.length  \n    \n    p1 = polygonPoints[0] \n\n    for (let i = 1; i <= pointCount; i++) {  \n        p2 = polygonPoints[i % pointCount]\n        if (  \n            checkPoint[0] > Math.min(p1[0], p2[0]) &&  \n            checkPoint[0] <= Math.max(p1[0], p2[0])  \n        ) {  \n            if (checkPoint[1] <= Math.max(p1[1], p2[1])) {  \n                if (p1[0] != p2[0]) {  \n                    xinters =  \n                        (checkPoint[0] - p1[0]) *  \n                            (p2[1] - p1[1]) /  \n                            (p2[0] - p1[0]) +  \n                        p1[1];  \n                    if (p1[1] == p2[1] || checkPoint[1] <= xinters) {  \n                        counter++  \n                    }  \n                }  \n            }  \n        }  \n        p1 = p2\n    }  \n    if (counter % 2 == 0) {  \n        return false \n    } else {  \n        return true \n    }  \n}\n\n/**\n * @name 缩放坐标\n * @param {Array} arr 数据\n * @param {Number} scale 缩放大小 \n */\nexport function scaleCoordinates (arr, scale) {\n    let result = []\n    for (let i = 0, l = arr.length; i < l; i++) {\n        result[i] = []\n        let inner = arr[i]\n        for (let n = 0, m = inner.length; n < m; n++) {\n            result[i].push([\n                inner[n][0] * scale,\n                inner[n][1] * scale\n            ])\n        }\n    }\n    return result\n}","import getMapDataInfo from './getMapBlockInfo.js'\nimport { setDPIFontSize } from '../style.js'\nimport {\n    selfStyle,\n    getBetweenRandom,\n    isInPolygon,\n    scaleCoordinates\n} from './methods.js'\n\nexport function setBoundary (opt) {\n    let boundary = this.options.map.boundary\n\n    Object.assign(boundary, getMapDataInfo(boundary.data))\n\n    this.setColorsHashID(opt, boundary)\n\n    // 设置最小缩放\n    opt.mapScale = Math.min(\n        this.hitMainCanvas.width / boundary.width, \n        this.hitMainCanvas.height / boundary.height\n    )\n\n    opt.boundary = Object.assign({}, boundary)\n    opt.mapTranslateX = 0\n    opt.mapTranslateY = 0\n\n    return opt\n}\n\n\nexport function setBlocks (opt) {\n    const blocks = this.options.map.blocks\n    const areas = blocks.data\n\n    for (let i = 0, l = areas.length; i < l; i++) {\n        let _data = areas[i]\n        \n        _data = Object.assign({}, _data, getMapDataInfo(_data.map), {\n            style: new selfStyle(blocks.style),\n            index: i,\n            over: false,\n            hold: false\n        })\n        \n        this.setColorsHashID(opt, _data)\n\n        opt.blocks.push(_data)\n    }\n\n    return opt\n}\n\n\n/**\n * 设置文字\n * @description 对文字的大小按屏幕地 devicePixelRatio 缩放\n */\nexport function setTextName (map) {\n    // 获取区块名称用户设置\n    let cityName = this.options.map.blocks.cityName\n\n    if (!cityName) return map\n\n    // 判断是否已经处理过高清屏文字\n    if (!cityName.fixed) {\n        Object.keys(cityName).forEach(name => {\n            Object.assign(\n                cityName[name], \n                setDPIFontSize(cityName[name], this.DPI)\n            )\n        })\n    }\n\n    // 检查是否有默认的属性\n    if (!cityName.hasOwnProperty('normal')) {\n        return console.warn(`Don't find cityName has 'normal'`)\n    }\n\n    map.blocks.forEach(val => {\n        val.nameStyle = {\n            normal: new selfStyle(cityName.normal),\n            hover: new selfStyle(cityName.hover ? cityName.hover : cityName.normal)\n        }\n    })\n\n    cityName.fixed = true\n\n    return map\n}\n\n/**\n * 设置区块内的点\n */\nexport function getPoints (map) {\n    let blocks = this.options.map.blocks\n    let point = blocks.point\n\n    if (!point) return map\n\n    map.hasPoint = true\n\n    let minR = Math.min.apply({}, point.r)\n    let maxR = Math.max.apply({}, point.r)\n\n    let getPoint = val => {\n        let x = -1\n        let y = -1\n        while (true) {\n            x = ~~getBetweenRandom(val.x.start, val.x.end)\n            y = ~~getBetweenRandom(val.y.start, val.y.end)\n            if (isInPolygon([x,y], val.coordinates[0])) {\n                return [x,y]\n            }\n        }\n    }\n\n    map.blocks.forEach(val => {\n        if (point.size) {\n            let size = point.size\n            let pointSize = 1\n            \n            if (size.min !== size.max) {\n                pointSize = ~~getBetweenRandom(size.min, size.max)\n            }\n\n            val.point = []\n\n            for (let i = 0; i < pointSize; i++) {\n                let { x } = val.centroid\n                let { y } = val.centroid\n\n                if (size.min !== size.max) [x,y] = getPoint(val)\n\n                val.point.push({\n                    r: getBetweenRandom(minR, maxR) * this.DPI,\n                    color: point.color[~~getBetweenRandom(0, point.color.length)],\n                    position: {x, y}\n                })\n            }\n        }\n    })\n\n    return map\n}\n\n/**\n * 缩放地图\n * @param {number} val 缩放地图\n */\nexport function setMapScale (val) {\n    let history = this.history\n    let currentMap = history.map[history.index]\n    let defVal = currentMap.mapScale\n\n    history.map[history.index].mapScale = val || defVal\n\n    this.scaleBoundary(currentMap)\n    this.scaleBlocks(currentMap)\n    this.scalePoints(currentMap)\n}\n\n/**\n * 缩放边界\n */\nexport function scaleBoundary (map) {\n    if (map.mapTranslateX === 0) {\n        map.mapTranslateX =  0 - map.boundary.x.start * map.mapScale\n        map.mapTranslateY = 0 - map.boundary.y.start * map.mapScale\n    }\n    \n    map.boundary._coordinates = scaleCoordinates(map.boundary.coordinates, map.mapScale)\n}\n\n/**\n * 缩放块\n */\nexport function scaleBlocks (map) {\n    for (let i = 0, l = map.blocks.length; i < l; i++) {\n        let inner = map.blocks[i]\n        inner._coordinates = scaleCoordinates(inner.coordinates, map.mapScale)\n    }\n}\n\n/**\n * 缩放点\n */\nexport function scalePoints (map) {\n    let blocks = map.blocks\n\n    if (!map.hasPoint) return\n\n    for (let i = 0, l = blocks.length; i < l; i++) {\n        blocks[i]._point = []\n        let pointL = blocks[i].point.length\n\n        for (let p = 0; p < pointL; p++) {\n            let point = blocks[i].point[p]\n\n            blocks[i]._point.push( {\n                x: point.position.x * map.mapScale,\n                y: point.position.y * map.mapScale,\n                r: point.r,\n                color: point.color\n            })\n        }\n    }\n}\n\n\n/**\n * 备案区块信息\n * @param {object} map 当前地图\n * @param {object} data 区块信息\n */\nexport function setColorsHashID (map, data) {\n    let hash = map.colorsHash\n\n    while (true) {\n        const colorKey = this.getRandomColor()\n\n        if (!hash[colorKey]) {\n            hash[colorKey] = data\n            data.hitStyle = new selfStyle({\n                fillStyle: colorKey\n            })\n            return\n        }\n    }\n}\n\n\nexport function getRandomColor () {\n    const r = Math.round(Math.random() * 255)\n    const g = Math.round(Math.random() * 255)\n    const b = Math.round(Math.random() * 255)\n    return `rgb(${r},${g},${b})`\n}\n\nexport function hasSameHashColor (color, shape) {\n    return shape.color === color\n}\n\n\n/**\n * 缩放地图\n * @param {number} val 缩放大小\n */\nexport function scaleMap (val) {\n    let currentMap = this.history.map[this.history.index]\n\n    this.setMapScale(val)\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n\n    window.requestAnimationFrame(() => this.drawAllBoundary() )\n}\n\nexport function getLikeGeoJson (arr) {\n    let result = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        result.push([arr[i], arr[i+1]])\n    }\n    return result\n}\n","\n/**\n * @name 绘制所有区块\n */\nexport function drawAllBoundary () {\n    let currentMap = this.history.map[this.history.index]\n\n    this.clearCanvasCtx()\n    // 边界\n    this.drawMainBoundary(currentMap)\n    // 区\n    this.drawBlockBoundary(currentMap)\n    // 点\n    this.drawBlockPoints(currentMap)\n    // 城市名\n    this.drawText(currentMap)\n    \n    this.ctx.setTransform(1, 0, 0, 1, 0, 0)\n    this.hitCtx.setTransform(1, 0, 0, 1, 0, 0)\n}\n\n/**\n * @name 绘制内部区块\n * @param {Object} obj 绘制的区块信息\n */\nexport function drawBoundary (obj, ctxs, style) {\n    let l = obj._coordinates.length\n\n    for (let i = 0; i < l; i++) {\n        let ctx = this.drawLine(\n            this.ctx,\n            obj._coordinates[i],\n            obj.style\n        )\n\n        this.drawLine(\n            this.hitCtx,\n            obj._coordinates[i],\n            obj.hitStyle\n        )\n    }\n}\n\n/**\n * 绘制主要边界\n */\nexport function drawMainBoundary (map) {\n    this.drawBoundary(map.boundary)\n}\n\n/**\n * 绘制区块边界\n */\nexport function drawBlockBoundary (map) {\n    let l = map.blocks.length\n\n    for (let i = 0; i < l; i++) {\n        this.drawBoundary( map.blocks[i] )\n    }\n}\n\n/**\n * @name 绘制圆\n * @param {Object} ctx canvas 对象\n * @param {Object} option 设置\n * @param {Objetc} style 样式\n */\nexport function drawArc (ctx, option, style) {\n    ctx = this.setCtxState(style, ctx)\n    ctx.arc(\n        option.x, // x\n        option.y, // y\n        option.r, // R 半径\n        option.s, // 开始角度\n        option.e, // 结束角度\n        option.d  // 顺时针(false)\n    )\n    ctx.fill()\n    ctx.closePath()\n    ctx.restore()\n}\n\n/**\n * @name 绘制名字\n */\nexport function drawText (map, ctx = this.ctx) {\n    \n    let cityName = this.options.map.blocks.cityName\n    if (!cityName) return\n\n    let Obj = map.blocks\n    let move = cityName.move || {x: 0, y: 0}\n\n    for (let i = 0, l = map.blocks.length;i < l; i++) {\n        let city = Obj[i]\n        let style = city.nameStyle.normal\n        let width = city.width * map.mapScale\n        let txtWidth = ctx.measureText(city.name).width\n\n        if (city.name) {\n            if (map.mouseMoveIndex === i) {\n                style = city.nameStyle.hover\n            }\n            \n            if (txtWidth < width / this.textVsWidth || city.index === map.mouseMoveIndex) {\n                let x = city.centroid.x * map.mapScale + move.x\n                let y = city.centroid.y * map.mapScale + move.y\n                \n                ctx.save()\n                ctx = this.setCtxState(style, ctx)\n                ctx.textAlign = cityName.align || 'center'\n                ctx.textBaseline = \"middle\"\t\t\n                ctx.fillText(city.name, x, y)\t\t\n                ctx.restore()\n            }\n        }\n    }\n}\n\n/**\n * 中心坐标 \n */\nexport function drawCenterLine () {\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(0, this.ctxH/2)\n    this.ctx.lineTo(this.ctxW, this.ctxH/2)\n    this.ctx.stroke()\n\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(this.ctxW/2,0)\n    this.ctx.lineTo(this.ctxW/2, this.ctxH)\n    this.ctx.stroke()\n}\n\n/**\n * 绘制区块中随机点\n */\nexport function drawBlockPoints (map) {\n    const data = map.blocks\n\n    if (!map.hasPoint) return map\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let _W = data[i].width * map.mapScale\n\n        data[i]._point.forEach(point => {\n            // 当宽度大于5倍点半径时，点才显示\n            if (_W > point.r * 5) {\n                this.drawArc(\n                    this.ctx,\n                    {\n                        x: point.x,\n                        y: point.y,\n                        r: point.r,\n                        s: 0,\n                        e: Math.PI * 2,\n                        d: false\n                    },\n                    {\n                        fillStyle: point.color\n                    }\n                )\n            }\n        })\n    }\n}\n\n\n/**\n * @name 绘制线\n * @param {Object} ctx - canvas 对象\n * @param {Array} data - 绘制的线\n * @param {Object} style - 绘制的样式\n */\nexport function drawLine (ctx, data, style) {\n    ctx = this.setCtxState(style, ctx)\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let x = data[i][0]\n        let y = data[i][1]\n        if (i === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    }\n    \n    ctx.lineJoin = 'round'\n    ctx.stroke()\n    ctx.fill()\n    ctx.closePath()\n\n    return ctx\n}\n\n/**\n * \n * @param {object} map 地图\n * @param {number} x x轴偏移量\n * @param {number} y y轴偏移量\n */\nexport function translateCtx (map, x = 0, y = 0) {\n    let X = (this.ctxW - map.boundary.width * map.mapScale)/ 2 + x\n    let Y = (this.ctxH - map.boundary.height * map.mapScale)/ 2 + y\n\n    this.clearCanvasCtx()\n    this.ctx.translate(X, Y)\n    this.hitCtx.translate(X, Y)\n}\n","export class History {\n\n    constructor () {\n        this.map = [],\n        this.index = 0\n    }\n\n    go (val) {\n        console.log(`go ${val}`)\n        let history = this.constructor.history\n        let mapSize = history.map.length\n        \n        if (isNaN(val)) {\n            return console.warn(`val is not a Number`)\n        }\n\n        val = parseInt(val)\n        if (!val) return\n\n        // 重置新的地图状态\n        let i = history.index\n        let max = mapSize -1\n        i += val\n        \n        if (val > 0) {\n            i = i >  max ? i = max : i\n        } else {\n            i = i < 0 ? 0 : i\n        }\n        \n        this.constructor.zoomOut()\n        this.constructor.history.index = i\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    back () {\n        // 重置新的地图状态\n        let i = this.constructor.history.index\n\n        if (!i) return\n\n        this.constructor.fadeOut()\n\n        this.constructor.history.index = i -1 > 0 ? i -1 : 0\n\n        setTimeout(() => {\n            this.constructor.zoomIn()\n        }, 1000)\n    }\n\n    forward () {\n        let history = this.constructor.history\n        let i = history.index\n        // 重置新的地图状态\n        i += 1\n\n        if (i >= history.map.length) return\n\n        this.constructor.history.index = i\n\n        this.constructor.zoomOut()\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    // key 用于区分渲染\n    push ({boundary, blocks, key} = opt) {\n        let _ = this.constructor\n        let _H = _.history\n        let setNewMap = () => {\n            let optMap = _.options.map\n    \n            optMap.boundary.data = boundary\n            optMap.blocks.data = blocks\n            // 重置地图数据\n            _.setMapData()\n    \n            _H.map[_H.index].parentID = key\n        }\n        \n        _.zoomOut()\n        _H.index += 1\n        \n        let oldMap = _H.map[_H.index]\n        \n        if (oldMap) {\n            if (oldMap.parentID !== key) {\n                _H.map.length = _H.index\n                setNewMap()\n            }\n        } else {\n            setNewMap()\n        }\n\n        setTimeout(() => {\n            _.fadeIn()\n        }, 1000)\n    }\n}\n\nexport function setHistory () {\n    this.history = new this.History()\n    this.history.__proto__.constructor = this\n}","/**\n * CMAP\n * @description Canvas 地图\n * @version 2.0.0\n * @author ekxt <https://ektx.github.io/>\n * @see https://github.com/ektx/canvas-map\n * @date 2017-10-27\n */\n\nimport * as event from './event/index.js'\nimport * as init from './init.js'\nimport * as animate from './animate/index.js'\nimport * as canvas from './canvas.js'\nimport * as compute from './compute/index.js'\nimport * as draw from './draw.js'\nimport * as style from './style.js'\nimport * as history from './history.js'\n\nconst myCmap = {\n\t...event,\n\t...init,\n\t...animate,\n\t...canvas,\n\t...compute,\n    ...draw,\n\t...style,\n\t...history\n}\n\nclass CMap {\n\tconstructor (options) {\n\t\tthis.options = options\n\t\tthis.DPI = window.devicePixelRatio\n\t\tthis.mainCanvas = null\n\t\tthis.ctx = null\n\t\tthis.hitCtx = null\n\t\tthis.ctxW = 0\n\t\tthis.ctxH = 0\n\t\tthis.inAnimate = false\n\t\t// 文字与区块宽度比（文字最大可用大小）\n\t\tthis.textVsWidth = 2\n\t}\n}\n\nObject.keys(myCmap).forEach(name => {\n\tObject.defineProperty(CMap.prototype, name, {\n\t\tvalue: myCmap[name]\n\t})\n})\n\nexport default CMap"],"names":["mouseEvt","historyIndex","currentMap","_blocks","_opt","this","options","_callback","callback","selectedMode","_selectedMode","style","_BStyle","map","blocks","mouseMove","hold","x","y","status","checkInMap","pixel","hitCtx","getImageData","data","color","shape","colorsHash","index","draw","translateCtx","mouseEvtData","mapX","mapY","drawAllBoundary","inHoldBlocks","holdBlocks","includes","mouseMoveIndex","callbackEvt","type","evt","hasOwnProperty","ele","addEventListener","offsetX","DPI","offsetY","inAnimate","history","mapTranslateX","mapTranslateY","buttons","moveIndex","fillStyle","holdColor","hoverColor","_index","indexOf","splice","push","length","forEach","val","getEleInfo","document","querySelector","el","eleBCR","getBoundingClientRect","init","setHistory","appendCanvasElement","setMapData","opt","mapScale","boundary","hasPoint","setBoundary","setBlocks","setTextName","getPoints","setMapScale","stepAnimate","opts","start","Date","id","setInterval","progress","duration","delta","clearInterval","doneback","delay","quadAni","Math","pow","backAni","makeEaseInOutAni","fadeIn","time","coe","_canvas","createTemCanvas","clearCanvasCtx","scaleDelta","ctx","save","globalAlpha","translate","mainCanvas","width","height","scale","drawImage","restore","fadeOut","_coe","reDelta","zoomOut","ctxW","ctxH","zoomIn","createCanvas","canvas","createElement","W","H","position","hitMainCanvas","getContext","appendChild","copyCtxImg","putImageData","notHit","clearRect","getMapDataInfo","xArr","yArr","centroid","coordinates","i","l","_data","computedData","end","xStart","min","apply","yStart","xEnd","max","yEnd","center","arr","Array","isArray","console","warn","getCentroid","twoTimesSignedArea","cxTimes6SignedArea","cyTimes6SignedArea","_x","parseFloat","_y","__x","__y","twoSA","sixSignedArea","setDPIFontSize","Object","keys","font","fontArr","match","szie","unit","replace","reSet","setCtxState","styleOption","beginPath","selfStyle","getBetweenRandom","random","isInPolygon","checkPoint","polygonPoints","xinters","p1","p2","counter","pointCount","scaleCoordinates","result","inner","n","m","assign","setColorsHashID","areas","over","cityName","fixed","name","nameStyle","normal","hover","point","minR","r","maxR","getPoint","size","pointSize","defVal","scaleBoundary","scaleBlocks","scalePoints","_coordinates","_point","pointL","p","hash","colorKey","getRandomColor","hitStyle","round","hasSameHashColor","scaleMap","window","requestAnimationFrame","getLikeGeoJson","drawMainBoundary","drawBlockBoundary","drawBlockPoints","drawText","setTransform","drawBoundary","obj","ctxs","drawLine","drawArc","option","arc","s","e","d","fill","closePath","Obj","move","city","txtWidth","measureText","textVsWidth","textAlign","align","textBaseline","fillText","drawCenterLine","strokeStyle","moveTo","lineTo","stroke","_W","PI","lineJoin","X","Y","History","[object Object]","log","constructor","mapSize","isNaN","parseInt","setTimeout","key","_","_H","setNewMap","optMap","parentID","oldMap","__proto__","myCmap","event","animate","compute","CMap","devicePixelRatio","defineProperty","prototype","value"],"mappings":"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"}